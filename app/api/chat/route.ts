import { streamText } from "ai"
import { openai } from "@ai-sdk/openai"
import { analyticsStore, categorizeQuestion } from "@/lib/analytics"

export async function POST(req: Request) {
  console.log("=== Chat API Called ===")

  try {
    // ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
    const apiKey = process.env.OPENAI_API_KEY
    console.log("API Key exists:", !!apiKey)

    if (!apiKey) {
      console.error("‚ùå OpenAI API key not found")
      return Response.json({ error: "OpenAI API key not configured" }, { status: 500 })
    }

    // ÏöîÏ≤≠ Î≥∏Î¨∏ ÌååÏã±
    const body = await req.json()
    console.log("Request body:", body)

    const { messages } = body

    if (!messages || !Array.isArray(messages)) {
      console.error("‚ùå Invalid messages format:", messages)
      return Response.json({ error: "Invalid messages format" }, { status: 400 })
    }

    console.log("‚úÖ Messages received:", messages.length)

    // Î∂ÑÏÑùÏùÑ ÏúÑÌïú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
    const startTime = Date.now()
    const userMessage = messages[messages.length - 1]?.content || ""
    const sessionId = req.headers.get("x-session-id") || "anonymous"

    // OpenAI API Ìò∏Ï∂ú
    console.log("ü§ñ Calling OpenAI API...")

    const result = streamText({
      model: openai("gpt-4o"),
      system: `ÎãπÏã†ÏùÄ HeyChainÏùò Web3 Ï†ÑÎ¨∏ AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§.

Ïó≠Ìï†:
- Web3, Î∏îÎ°ùÏ≤¥Ïù∏, ÏïîÌò∏ÌôîÌèê, DeFi, NFT, DAO Îì±Ïóê ÎåÄÌïú Ï†ÑÎ¨∏Ï†ÅÏù¥Í≥† Ï†ïÌôïÌïú Ï†ïÎ≥¥ Ï†úÍ≥µ
- Î≥µÏû°Ìïú Í∞úÎÖêÏùÑ Ï¥àÎ≥¥ÏûêÎèÑ Ïù¥Ìï¥Ìï† Ïàò ÏûàÎèÑÎ°ù ÏâΩÍ≤å ÏÑ§Î™Ö
- Ïã§Ïö©Ï†ÅÏù∏ Í∞ÄÏù¥ÎìúÏôÄ Îã®Í≥ÑÎ≥Ñ ÏÑ§Î™Ö Ï†úÍ≥µ

ÎãµÎ≥Ä Ïä§ÌÉÄÏùº:
- ÏπúÍ∑ºÌïòÍ≥† Ï†ëÍ∑ºÌïòÍ∏∞ Ïâ¨Ïö¥ ÌÜ§
- ÌïúÍµ≠Ïñ¥Î°ú ÎãµÎ≥Ä
- Íµ¨Ï≤¥Ï†ÅÏù∏ ÏòàÏãúÏôÄ Ïã§Ïö©Ï†ÅÏù∏ ÌåÅ Ìè¨Ìï®
- ÎãµÎ≥Ä Í∏∏Ïù¥Îäî Ï†ÅÏ†àÌïòÍ≤å Ï°∞Ï†à

Ï†úÌïúÏÇ¨Ìï≠:
- Ìà¨Ïûê Ï°∞Ïñ∏ÏùÄ ÌïòÏßÄ ÏïäÏùå (ÏùºÎ∞òÏ†ÅÏù∏ Ï†ïÎ≥¥Îßå Ï†úÍ≥µ)
- Î∂àÌôïÏã§Ìïú Ï†ïÎ≥¥Îäî Ï∂îÏ∏°ÌïòÏßÄ ÏïäÏùå`,
      messages,
      onFinish: async (result) => {
        // Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        const endTime = Date.now()
        const responseTime = endTime - startTime
        const category = categorizeQuestion(userMessage)

        analyticsStore.logChat({
          question: userMessage,
          responseTime,
          sessionId,
          category,
          tokenUsage: result.usage
            ? {
                prompt: result.usage.promptTokens,
                completion: result.usage.completionTokens,
                total: result.usage.totalTokens,
              }
            : undefined,
        })
      },
    })

    console.log("‚úÖ OpenAI API call successful")

    // toDataStreamResponse Î©îÏÑúÎìú ÏÇ¨Ïö©
    return result.toDataStreamResponse()
  } catch (error) {
    console.error("‚ùå Chat API Error:", error)

    return Response.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}

export async function OPTIONS() {
  return new Response(null, {
    status: 200,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type",
    },
  })
}
